generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid          String         @id @default(uuid()) @db.Uuid
  name         String         @db.VarChar(60)
  email        String         @unique @db.VarChar(100)
  password     String         @db.VarChar(255)
  imagePath    String         @default("defaul_img_path") @db.VarChar(255)
  idRole       Int
  refreshToken String?        @unique
  resetToken   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Role         Role           @relation(fields: [idRole], references: [id])
  OrderHistory OrderHistory[]
  Order        Order[]

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique @db.VarChar(20)
  Users User[]

  @@map("roles")
}

model Produit {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(100)
  description        String               @db.VarChar(500)
  imagePath          String               @default("produit/default.png") @db.VarChar(255)
  price              Decimal
  isPlatDuJour       Boolean
  promotion          Decimal              @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  idType             Int
  Produit_Ingredient Produit_Ingredient[]
  Type               Type                 @relation(fields: [idType], references: [id])
  OrderHistory       OrderHistory[]
  OrderItem          OrderItem[]

  @@map("produits")
}

model Order {
  id         Int         @id @default(autoincrement())
  uidUser    String      @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  idStatus   Int         @default(1)
  totalPrice Decimal // Total calculé de la commande
  User       User        @relation(fields: [uidUser], references: [uid])
  OrderItems OrderItem[] // Relation vers les articles de la commande
  Status     OrderStatus @relation(fields: [idStatus], references: [id])

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  idOrder   Int // Lien vers la commande globale
  idProduit Int // Lien vers le produit commandé
  quantity  Int     @default(1) // Quantité du produit commandé
  unitPrice Decimal // Prix unitaire au moment de la commande
  Produit   Produit @relation(fields: [idProduit], references: [id])
  Order     Order   @relation(fields: [idOrder], references: [id])

  @@map("order_items")
}

model Ingredient {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  quantity           Int
  unit               String
  Produit_Ingredient Produit_Ingredient[]

  @@map("ingredients")
}

model Produit_Ingredient {
  idIngredient Int
  idProduit    Int
  quantity     Int
  Ingredient   Ingredient @relation(fields: [idIngredient], references: [id])
  Produit      Produit    @relation(fields: [idProduit], references: [id])

  @@id([idProduit, idIngredient])
  @@map("produits_ingredients")
}

model Type {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Produit Produit[]

  @@map("types")
}

model OrderStatus {
  id    Int     @id @default(autoincrement())
  name  String  @unique // "En attente", "En préparation", "Prête", "Terminée"
  Order Order[]

  @@map("order_status")
}

model OrderHistory {
  id    Int     @id @default(autoincrement())
  price Decimal @db.Decimal(10, 2) // Prix payé au moment de la commande

  completedAt DateTime @default(now())

  User      User?    @relation(fields: [userUid], references: [uid])
  userUid   String?  @db.Uuid
  Produit   Produit? @relation(fields: [produitId], references: [id])
  produitId Int?

  @@map("order_history")
}
